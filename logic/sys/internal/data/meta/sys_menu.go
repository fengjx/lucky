// Code generated by "daox.gen"; DO NOT EDIT.
package meta

import (
    "github.com/fengjx/daox/sqlbuilder"
    "github.com/fengjx/daox/sqlbuilder/ql"


    "time"

)



// SysMenuM 系统菜单表
type SysMenuM struct {
    ID string
    ParentID string
    Name string
    Icon string
    Path string
    Redirect string
    SchemaAPI string
    SortNo string
    Visible string
    IsSys string
    Status string
    Remark string
    Utime string
    Ctime string
}

func (m SysMenuM) TableName() string {
    return "sys_menu"
}

func (m SysMenuM) IsAutoIncrement() bool {
    return true
}

func (m SysMenuM) PrimaryKey() string {
    return "id"
}

func (m SysMenuM) Columns() []string {
	return []string{
        "id",
        "parent_id",
        "name",
        "icon",
        "path",
        "redirect",
        "schema_api",
        "sort_no",
        "visible",
        "is_sys",
        "status",
        "remark",
        "utime",
        "ctime",
    }
}

var SysMenuMeta = SysMenuM{
    ID: "id",
    ParentID: "parent_id",
    Name: "name",
    Icon: "icon",
    Path: "path",
    Redirect: "redirect",
    SchemaAPI: "schema_api",
    SortNo: "sort_no",
    Visible: "visible",
    IsSys: "is_sys",
    Status: "status",
    Remark: "remark",
    Utime: "utime",
    Ctime: "ctime",
}




func (m SysMenuM) IdIn(vals ...int64) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.ID).In(args...)
}

func (m SysMenuM) IdNotIn(vals ...int64) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.ID).NotIn(args...)
}

func (m SysMenuM) IdEQ(val int64) sqlbuilder.Column {
	return ql.Col(m.ID).EQ(val)
}

func (m SysMenuM) IdNotEQ(val int64) sqlbuilder.Column {
	return ql.Col(m.ID).NotEQ(val)
}

func (m SysMenuM) IdLT(val int64) sqlbuilder.Column {
	return ql.Col(m.ID).LT(val)
}

func (m SysMenuM) IdLTEQ(val int64) sqlbuilder.Column {
	return ql.Col(m.ID).LTEQ(val)
}

func (m SysMenuM) IdGT(val int64) sqlbuilder.Column {
	return ql.Col(m.ID).GT(val)
}

func (m SysMenuM) IdGTEQ(val int64) sqlbuilder.Column {
	return ql.Col(m.ID).GTEQ(val)
}

func (m SysMenuM) IdLike(val int64) sqlbuilder.Column {
	return ql.Col(m.ID).Like(val)
}

func (m SysMenuM) IdNotLike(val int64) sqlbuilder.Column {
	return ql.Col(m.ID).NotLike(val)
}

func (m SysMenuM) IdDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.ID)
}

func (m SysMenuM) IdAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.ID)
}



func (m SysMenuM) ParentIdIn(vals ...int64) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.ParentID).In(args...)
}

func (m SysMenuM) ParentIdNotIn(vals ...int64) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.ParentID).NotIn(args...)
}

func (m SysMenuM) ParentIdEQ(val int64) sqlbuilder.Column {
	return ql.Col(m.ParentID).EQ(val)
}

func (m SysMenuM) ParentIdNotEQ(val int64) sqlbuilder.Column {
	return ql.Col(m.ParentID).NotEQ(val)
}

func (m SysMenuM) ParentIdLT(val int64) sqlbuilder.Column {
	return ql.Col(m.ParentID).LT(val)
}

func (m SysMenuM) ParentIdLTEQ(val int64) sqlbuilder.Column {
	return ql.Col(m.ParentID).LTEQ(val)
}

func (m SysMenuM) ParentIdGT(val int64) sqlbuilder.Column {
	return ql.Col(m.ParentID).GT(val)
}

func (m SysMenuM) ParentIdGTEQ(val int64) sqlbuilder.Column {
	return ql.Col(m.ParentID).GTEQ(val)
}

func (m SysMenuM) ParentIdLike(val int64) sqlbuilder.Column {
	return ql.Col(m.ParentID).Like(val)
}

func (m SysMenuM) ParentIdNotLike(val int64) sqlbuilder.Column {
	return ql.Col(m.ParentID).NotLike(val)
}

func (m SysMenuM) ParentIdDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.ParentID)
}

func (m SysMenuM) ParentIdAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.ParentID)
}



func (m SysMenuM) NameIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Name).In(args...)
}

func (m SysMenuM) NameNotIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Name).NotIn(args...)
}

func (m SysMenuM) NameEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Name).EQ(val)
}

func (m SysMenuM) NameNotEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Name).NotEQ(val)
}

func (m SysMenuM) NameLT(val string) sqlbuilder.Column {
	return ql.Col(m.Name).LT(val)
}

func (m SysMenuM) NameLTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Name).LTEQ(val)
}

func (m SysMenuM) NameGT(val string) sqlbuilder.Column {
	return ql.Col(m.Name).GT(val)
}

func (m SysMenuM) NameGTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Name).GTEQ(val)
}

func (m SysMenuM) NameLike(val string) sqlbuilder.Column {
	return ql.Col(m.Name).Like(val)
}

func (m SysMenuM) NameNotLike(val string) sqlbuilder.Column {
	return ql.Col(m.Name).NotLike(val)
}

func (m SysMenuM) NameDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.Name)
}

func (m SysMenuM) NameAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.Name)
}



func (m SysMenuM) IconIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Icon).In(args...)
}

func (m SysMenuM) IconNotIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Icon).NotIn(args...)
}

func (m SysMenuM) IconEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Icon).EQ(val)
}

func (m SysMenuM) IconNotEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Icon).NotEQ(val)
}

func (m SysMenuM) IconLT(val string) sqlbuilder.Column {
	return ql.Col(m.Icon).LT(val)
}

func (m SysMenuM) IconLTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Icon).LTEQ(val)
}

func (m SysMenuM) IconGT(val string) sqlbuilder.Column {
	return ql.Col(m.Icon).GT(val)
}

func (m SysMenuM) IconGTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Icon).GTEQ(val)
}

func (m SysMenuM) IconLike(val string) sqlbuilder.Column {
	return ql.Col(m.Icon).Like(val)
}

func (m SysMenuM) IconNotLike(val string) sqlbuilder.Column {
	return ql.Col(m.Icon).NotLike(val)
}

func (m SysMenuM) IconDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.Icon)
}

func (m SysMenuM) IconAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.Icon)
}



func (m SysMenuM) PathIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Path).In(args...)
}

func (m SysMenuM) PathNotIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Path).NotIn(args...)
}

func (m SysMenuM) PathEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Path).EQ(val)
}

func (m SysMenuM) PathNotEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Path).NotEQ(val)
}

func (m SysMenuM) PathLT(val string) sqlbuilder.Column {
	return ql.Col(m.Path).LT(val)
}

func (m SysMenuM) PathLTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Path).LTEQ(val)
}

func (m SysMenuM) PathGT(val string) sqlbuilder.Column {
	return ql.Col(m.Path).GT(val)
}

func (m SysMenuM) PathGTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Path).GTEQ(val)
}

func (m SysMenuM) PathLike(val string) sqlbuilder.Column {
	return ql.Col(m.Path).Like(val)
}

func (m SysMenuM) PathNotLike(val string) sqlbuilder.Column {
	return ql.Col(m.Path).NotLike(val)
}

func (m SysMenuM) PathDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.Path)
}

func (m SysMenuM) PathAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.Path)
}



func (m SysMenuM) RedirectIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Redirect).In(args...)
}

func (m SysMenuM) RedirectNotIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Redirect).NotIn(args...)
}

func (m SysMenuM) RedirectEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Redirect).EQ(val)
}

func (m SysMenuM) RedirectNotEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Redirect).NotEQ(val)
}

func (m SysMenuM) RedirectLT(val string) sqlbuilder.Column {
	return ql.Col(m.Redirect).LT(val)
}

func (m SysMenuM) RedirectLTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Redirect).LTEQ(val)
}

func (m SysMenuM) RedirectGT(val string) sqlbuilder.Column {
	return ql.Col(m.Redirect).GT(val)
}

func (m SysMenuM) RedirectGTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Redirect).GTEQ(val)
}

func (m SysMenuM) RedirectLike(val string) sqlbuilder.Column {
	return ql.Col(m.Redirect).Like(val)
}

func (m SysMenuM) RedirectNotLike(val string) sqlbuilder.Column {
	return ql.Col(m.Redirect).NotLike(val)
}

func (m SysMenuM) RedirectDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.Redirect)
}

func (m SysMenuM) RedirectAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.Redirect)
}



func (m SysMenuM) SchemaApiIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.SchemaAPI).In(args...)
}

func (m SysMenuM) SchemaApiNotIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.SchemaAPI).NotIn(args...)
}

func (m SysMenuM) SchemaApiEQ(val string) sqlbuilder.Column {
	return ql.Col(m.SchemaAPI).EQ(val)
}

func (m SysMenuM) SchemaApiNotEQ(val string) sqlbuilder.Column {
	return ql.Col(m.SchemaAPI).NotEQ(val)
}

func (m SysMenuM) SchemaApiLT(val string) sqlbuilder.Column {
	return ql.Col(m.SchemaAPI).LT(val)
}

func (m SysMenuM) SchemaApiLTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.SchemaAPI).LTEQ(val)
}

func (m SysMenuM) SchemaApiGT(val string) sqlbuilder.Column {
	return ql.Col(m.SchemaAPI).GT(val)
}

func (m SysMenuM) SchemaApiGTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.SchemaAPI).GTEQ(val)
}

func (m SysMenuM) SchemaApiLike(val string) sqlbuilder.Column {
	return ql.Col(m.SchemaAPI).Like(val)
}

func (m SysMenuM) SchemaApiNotLike(val string) sqlbuilder.Column {
	return ql.Col(m.SchemaAPI).NotLike(val)
}

func (m SysMenuM) SchemaApiDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.SchemaAPI)
}

func (m SysMenuM) SchemaApiAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.SchemaAPI)
}



func (m SysMenuM) SortNoIn(vals ...int32) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.SortNo).In(args...)
}

func (m SysMenuM) SortNoNotIn(vals ...int32) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.SortNo).NotIn(args...)
}

func (m SysMenuM) SortNoEQ(val int32) sqlbuilder.Column {
	return ql.Col(m.SortNo).EQ(val)
}

func (m SysMenuM) SortNoNotEQ(val int32) sqlbuilder.Column {
	return ql.Col(m.SortNo).NotEQ(val)
}

func (m SysMenuM) SortNoLT(val int32) sqlbuilder.Column {
	return ql.Col(m.SortNo).LT(val)
}

func (m SysMenuM) SortNoLTEQ(val int32) sqlbuilder.Column {
	return ql.Col(m.SortNo).LTEQ(val)
}

func (m SysMenuM) SortNoGT(val int32) sqlbuilder.Column {
	return ql.Col(m.SortNo).GT(val)
}

func (m SysMenuM) SortNoGTEQ(val int32) sqlbuilder.Column {
	return ql.Col(m.SortNo).GTEQ(val)
}

func (m SysMenuM) SortNoLike(val int32) sqlbuilder.Column {
	return ql.Col(m.SortNo).Like(val)
}

func (m SysMenuM) SortNoNotLike(val int32) sqlbuilder.Column {
	return ql.Col(m.SortNo).NotLike(val)
}

func (m SysMenuM) SortNoDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.SortNo)
}

func (m SysMenuM) SortNoAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.SortNo)
}



func (m SysMenuM) VisibleIn(vals ...int32) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Visible).In(args...)
}

func (m SysMenuM) VisibleNotIn(vals ...int32) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Visible).NotIn(args...)
}

func (m SysMenuM) VisibleEQ(val int32) sqlbuilder.Column {
	return ql.Col(m.Visible).EQ(val)
}

func (m SysMenuM) VisibleNotEQ(val int32) sqlbuilder.Column {
	return ql.Col(m.Visible).NotEQ(val)
}

func (m SysMenuM) VisibleLT(val int32) sqlbuilder.Column {
	return ql.Col(m.Visible).LT(val)
}

func (m SysMenuM) VisibleLTEQ(val int32) sqlbuilder.Column {
	return ql.Col(m.Visible).LTEQ(val)
}

func (m SysMenuM) VisibleGT(val int32) sqlbuilder.Column {
	return ql.Col(m.Visible).GT(val)
}

func (m SysMenuM) VisibleGTEQ(val int32) sqlbuilder.Column {
	return ql.Col(m.Visible).GTEQ(val)
}

func (m SysMenuM) VisibleLike(val int32) sqlbuilder.Column {
	return ql.Col(m.Visible).Like(val)
}

func (m SysMenuM) VisibleNotLike(val int32) sqlbuilder.Column {
	return ql.Col(m.Visible).NotLike(val)
}

func (m SysMenuM) VisibleDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.Visible)
}

func (m SysMenuM) VisibleAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.Visible)
}



func (m SysMenuM) IsSysIn(vals ...int32) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.IsSys).In(args...)
}

func (m SysMenuM) IsSysNotIn(vals ...int32) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.IsSys).NotIn(args...)
}

func (m SysMenuM) IsSysEQ(val int32) sqlbuilder.Column {
	return ql.Col(m.IsSys).EQ(val)
}

func (m SysMenuM) IsSysNotEQ(val int32) sqlbuilder.Column {
	return ql.Col(m.IsSys).NotEQ(val)
}

func (m SysMenuM) IsSysLT(val int32) sqlbuilder.Column {
	return ql.Col(m.IsSys).LT(val)
}

func (m SysMenuM) IsSysLTEQ(val int32) sqlbuilder.Column {
	return ql.Col(m.IsSys).LTEQ(val)
}

func (m SysMenuM) IsSysGT(val int32) sqlbuilder.Column {
	return ql.Col(m.IsSys).GT(val)
}

func (m SysMenuM) IsSysGTEQ(val int32) sqlbuilder.Column {
	return ql.Col(m.IsSys).GTEQ(val)
}

func (m SysMenuM) IsSysLike(val int32) sqlbuilder.Column {
	return ql.Col(m.IsSys).Like(val)
}

func (m SysMenuM) IsSysNotLike(val int32) sqlbuilder.Column {
	return ql.Col(m.IsSys).NotLike(val)
}

func (m SysMenuM) IsSysDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.IsSys)
}

func (m SysMenuM) IsSysAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.IsSys)
}



func (m SysMenuM) StatusIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Status).In(args...)
}

func (m SysMenuM) StatusNotIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Status).NotIn(args...)
}

func (m SysMenuM) StatusEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Status).EQ(val)
}

func (m SysMenuM) StatusNotEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Status).NotEQ(val)
}

func (m SysMenuM) StatusLT(val string) sqlbuilder.Column {
	return ql.Col(m.Status).LT(val)
}

func (m SysMenuM) StatusLTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Status).LTEQ(val)
}

func (m SysMenuM) StatusGT(val string) sqlbuilder.Column {
	return ql.Col(m.Status).GT(val)
}

func (m SysMenuM) StatusGTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Status).GTEQ(val)
}

func (m SysMenuM) StatusLike(val string) sqlbuilder.Column {
	return ql.Col(m.Status).Like(val)
}

func (m SysMenuM) StatusNotLike(val string) sqlbuilder.Column {
	return ql.Col(m.Status).NotLike(val)
}

func (m SysMenuM) StatusDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.Status)
}

func (m SysMenuM) StatusAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.Status)
}



func (m SysMenuM) RemarkIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Remark).In(args...)
}

func (m SysMenuM) RemarkNotIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Remark).NotIn(args...)
}

func (m SysMenuM) RemarkEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Remark).EQ(val)
}

func (m SysMenuM) RemarkNotEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Remark).NotEQ(val)
}

func (m SysMenuM) RemarkLT(val string) sqlbuilder.Column {
	return ql.Col(m.Remark).LT(val)
}

func (m SysMenuM) RemarkLTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Remark).LTEQ(val)
}

func (m SysMenuM) RemarkGT(val string) sqlbuilder.Column {
	return ql.Col(m.Remark).GT(val)
}

func (m SysMenuM) RemarkGTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Remark).GTEQ(val)
}

func (m SysMenuM) RemarkLike(val string) sqlbuilder.Column {
	return ql.Col(m.Remark).Like(val)
}

func (m SysMenuM) RemarkNotLike(val string) sqlbuilder.Column {
	return ql.Col(m.Remark).NotLike(val)
}

func (m SysMenuM) RemarkDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.Remark)
}

func (m SysMenuM) RemarkAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.Remark)
}



func (m SysMenuM) UtimeIn(vals ...time.Time) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Utime).In(args...)
}

func (m SysMenuM) UtimeNotIn(vals ...time.Time) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Utime).NotIn(args...)
}

func (m SysMenuM) UtimeEQ(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Utime).EQ(val)
}

func (m SysMenuM) UtimeNotEQ(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Utime).NotEQ(val)
}

func (m SysMenuM) UtimeLT(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Utime).LT(val)
}

func (m SysMenuM) UtimeLTEQ(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Utime).LTEQ(val)
}

func (m SysMenuM) UtimeGT(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Utime).GT(val)
}

func (m SysMenuM) UtimeGTEQ(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Utime).GTEQ(val)
}

func (m SysMenuM) UtimeLike(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Utime).Like(val)
}

func (m SysMenuM) UtimeNotLike(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Utime).NotLike(val)
}

func (m SysMenuM) UtimeDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.Utime)
}

func (m SysMenuM) UtimeAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.Utime)
}



func (m SysMenuM) CtimeIn(vals ...time.Time) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Ctime).In(args...)
}

func (m SysMenuM) CtimeNotIn(vals ...time.Time) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Ctime).NotIn(args...)
}

func (m SysMenuM) CtimeEQ(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Ctime).EQ(val)
}

func (m SysMenuM) CtimeNotEQ(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Ctime).NotEQ(val)
}

func (m SysMenuM) CtimeLT(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Ctime).LT(val)
}

func (m SysMenuM) CtimeLTEQ(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Ctime).LTEQ(val)
}

func (m SysMenuM) CtimeGT(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Ctime).GT(val)
}

func (m SysMenuM) CtimeGTEQ(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Ctime).GTEQ(val)
}

func (m SysMenuM) CtimeLike(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Ctime).Like(val)
}

func (m SysMenuM) CtimeNotLike(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Ctime).NotLike(val)
}

func (m SysMenuM) CtimeDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.Ctime)
}

func (m SysMenuM) CtimeAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.Ctime)
}
