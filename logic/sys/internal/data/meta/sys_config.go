// Code generated by "daox.gen"; DO NOT EDIT.
package meta

import (
    "github.com/fengjx/daox/sqlbuilder"
    "github.com/fengjx/daox/sqlbuilder/ql"


    "time"

)



// SysConfigM 系统配置
type SysConfigM struct {
    ID string
    Scope string
    Key string
    Value string
    Status string
    Remark string
    Utime string
    Ctime string
}

func (m SysConfigM) TableName() string {
    return "sys_config"
}

func (m SysConfigM) IsAutoIncrement() bool {
    return true
}

func (m SysConfigM) PrimaryKey() string {
    return "id"
}

func (m SysConfigM) Columns() []string {
	return []string{
        "id",
        "scope",
        "key",
        "value",
        "status",
        "remark",
        "utime",
        "ctime",
    }
}

var SysConfigMeta = SysConfigM{
    ID: "id",
    Scope: "scope",
    Key: "key",
    Value: "value",
    Status: "status",
    Remark: "remark",
    Utime: "utime",
    Ctime: "ctime",
}




func (m SysConfigM) IdIn(vals ...int64) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.ID).In(args...)
}

func (m SysConfigM) IdNotIn(vals ...int64) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.ID).NotIn(args...)
}

func (m SysConfigM) IdEQ(val int64) sqlbuilder.Column {
	return ql.Col(m.ID).EQ(val)
}

func (m SysConfigM) IdNotEQ(val int64) sqlbuilder.Column {
	return ql.Col(m.ID).NotEQ(val)
}

func (m SysConfigM) IdLT(val int64) sqlbuilder.Column {
	return ql.Col(m.ID).LT(val)
}

func (m SysConfigM) IdLTEQ(val int64) sqlbuilder.Column {
	return ql.Col(m.ID).LTEQ(val)
}

func (m SysConfigM) IdGT(val int64) sqlbuilder.Column {
	return ql.Col(m.ID).GT(val)
}

func (m SysConfigM) IdGTEQ(val int64) sqlbuilder.Column {
	return ql.Col(m.ID).GTEQ(val)
}

func (m SysConfigM) IdLike(val int64) sqlbuilder.Column {
	return ql.Col(m.ID).Like(val)
}

func (m SysConfigM) IdNotLike(val int64) sqlbuilder.Column {
	return ql.Col(m.ID).NotLike(val)
}

func (m SysConfigM) IdDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.ID)
}

func (m SysConfigM) IdAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.ID)
}



func (m SysConfigM) ScopeIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Scope).In(args...)
}

func (m SysConfigM) ScopeNotIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Scope).NotIn(args...)
}

func (m SysConfigM) ScopeEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Scope).EQ(val)
}

func (m SysConfigM) ScopeNotEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Scope).NotEQ(val)
}

func (m SysConfigM) ScopeLT(val string) sqlbuilder.Column {
	return ql.Col(m.Scope).LT(val)
}

func (m SysConfigM) ScopeLTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Scope).LTEQ(val)
}

func (m SysConfigM) ScopeGT(val string) sqlbuilder.Column {
	return ql.Col(m.Scope).GT(val)
}

func (m SysConfigM) ScopeGTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Scope).GTEQ(val)
}

func (m SysConfigM) ScopeLike(val string) sqlbuilder.Column {
	return ql.Col(m.Scope).Like(val)
}

func (m SysConfigM) ScopeNotLike(val string) sqlbuilder.Column {
	return ql.Col(m.Scope).NotLike(val)
}

func (m SysConfigM) ScopeDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.Scope)
}

func (m SysConfigM) ScopeAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.Scope)
}



func (m SysConfigM) KeyIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Key).In(args...)
}

func (m SysConfigM) KeyNotIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Key).NotIn(args...)
}

func (m SysConfigM) KeyEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Key).EQ(val)
}

func (m SysConfigM) KeyNotEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Key).NotEQ(val)
}

func (m SysConfigM) KeyLT(val string) sqlbuilder.Column {
	return ql.Col(m.Key).LT(val)
}

func (m SysConfigM) KeyLTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Key).LTEQ(val)
}

func (m SysConfigM) KeyGT(val string) sqlbuilder.Column {
	return ql.Col(m.Key).GT(val)
}

func (m SysConfigM) KeyGTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Key).GTEQ(val)
}

func (m SysConfigM) KeyLike(val string) sqlbuilder.Column {
	return ql.Col(m.Key).Like(val)
}

func (m SysConfigM) KeyNotLike(val string) sqlbuilder.Column {
	return ql.Col(m.Key).NotLike(val)
}

func (m SysConfigM) KeyDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.Key)
}

func (m SysConfigM) KeyAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.Key)
}



func (m SysConfigM) ValueIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Value).In(args...)
}

func (m SysConfigM) ValueNotIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Value).NotIn(args...)
}

func (m SysConfigM) ValueEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Value).EQ(val)
}

func (m SysConfigM) ValueNotEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Value).NotEQ(val)
}

func (m SysConfigM) ValueLT(val string) sqlbuilder.Column {
	return ql.Col(m.Value).LT(val)
}

func (m SysConfigM) ValueLTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Value).LTEQ(val)
}

func (m SysConfigM) ValueGT(val string) sqlbuilder.Column {
	return ql.Col(m.Value).GT(val)
}

func (m SysConfigM) ValueGTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Value).GTEQ(val)
}

func (m SysConfigM) ValueLike(val string) sqlbuilder.Column {
	return ql.Col(m.Value).Like(val)
}

func (m SysConfigM) ValueNotLike(val string) sqlbuilder.Column {
	return ql.Col(m.Value).NotLike(val)
}

func (m SysConfigM) ValueDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.Value)
}

func (m SysConfigM) ValueAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.Value)
}



func (m SysConfigM) StatusIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Status).In(args...)
}

func (m SysConfigM) StatusNotIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Status).NotIn(args...)
}

func (m SysConfigM) StatusEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Status).EQ(val)
}

func (m SysConfigM) StatusNotEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Status).NotEQ(val)
}

func (m SysConfigM) StatusLT(val string) sqlbuilder.Column {
	return ql.Col(m.Status).LT(val)
}

func (m SysConfigM) StatusLTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Status).LTEQ(val)
}

func (m SysConfigM) StatusGT(val string) sqlbuilder.Column {
	return ql.Col(m.Status).GT(val)
}

func (m SysConfigM) StatusGTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Status).GTEQ(val)
}

func (m SysConfigM) StatusLike(val string) sqlbuilder.Column {
	return ql.Col(m.Status).Like(val)
}

func (m SysConfigM) StatusNotLike(val string) sqlbuilder.Column {
	return ql.Col(m.Status).NotLike(val)
}

func (m SysConfigM) StatusDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.Status)
}

func (m SysConfigM) StatusAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.Status)
}



func (m SysConfigM) RemarkIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Remark).In(args...)
}

func (m SysConfigM) RemarkNotIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Remark).NotIn(args...)
}

func (m SysConfigM) RemarkEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Remark).EQ(val)
}

func (m SysConfigM) RemarkNotEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Remark).NotEQ(val)
}

func (m SysConfigM) RemarkLT(val string) sqlbuilder.Column {
	return ql.Col(m.Remark).LT(val)
}

func (m SysConfigM) RemarkLTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Remark).LTEQ(val)
}

func (m SysConfigM) RemarkGT(val string) sqlbuilder.Column {
	return ql.Col(m.Remark).GT(val)
}

func (m SysConfigM) RemarkGTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Remark).GTEQ(val)
}

func (m SysConfigM) RemarkLike(val string) sqlbuilder.Column {
	return ql.Col(m.Remark).Like(val)
}

func (m SysConfigM) RemarkNotLike(val string) sqlbuilder.Column {
	return ql.Col(m.Remark).NotLike(val)
}

func (m SysConfigM) RemarkDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.Remark)
}

func (m SysConfigM) RemarkAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.Remark)
}



func (m SysConfigM) UtimeIn(vals ...time.Time) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Utime).In(args...)
}

func (m SysConfigM) UtimeNotIn(vals ...time.Time) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Utime).NotIn(args...)
}

func (m SysConfigM) UtimeEQ(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Utime).EQ(val)
}

func (m SysConfigM) UtimeNotEQ(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Utime).NotEQ(val)
}

func (m SysConfigM) UtimeLT(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Utime).LT(val)
}

func (m SysConfigM) UtimeLTEQ(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Utime).LTEQ(val)
}

func (m SysConfigM) UtimeGT(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Utime).GT(val)
}

func (m SysConfigM) UtimeGTEQ(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Utime).GTEQ(val)
}

func (m SysConfigM) UtimeLike(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Utime).Like(val)
}

func (m SysConfigM) UtimeNotLike(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Utime).NotLike(val)
}

func (m SysConfigM) UtimeDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.Utime)
}

func (m SysConfigM) UtimeAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.Utime)
}



func (m SysConfigM) CtimeIn(vals ...time.Time) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Ctime).In(args...)
}

func (m SysConfigM) CtimeNotIn(vals ...time.Time) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Ctime).NotIn(args...)
}

func (m SysConfigM) CtimeEQ(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Ctime).EQ(val)
}

func (m SysConfigM) CtimeNotEQ(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Ctime).NotEQ(val)
}

func (m SysConfigM) CtimeLT(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Ctime).LT(val)
}

func (m SysConfigM) CtimeLTEQ(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Ctime).LTEQ(val)
}

func (m SysConfigM) CtimeGT(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Ctime).GT(val)
}

func (m SysConfigM) CtimeGTEQ(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Ctime).GTEQ(val)
}

func (m SysConfigM) CtimeLike(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Ctime).Like(val)
}

func (m SysConfigM) CtimeNotLike(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Ctime).NotLike(val)
}

func (m SysConfigM) CtimeDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.Ctime)
}

func (m SysConfigM) CtimeAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.Ctime)
}
