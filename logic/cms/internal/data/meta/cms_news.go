// Code generated by "daox.gen"; DO NOT EDIT.
package meta

import (
    "github.com/fengjx/daox/sqlbuilder"
    "github.com/fengjx/daox/sqlbuilder/ql"


    "time"

)



// CmsNewsM 新闻信息表
type CmsNewsM struct {
    ID string
    Title string
    Content string
    Topic string
    Status string
    Remark string
    Utime string
    Ctime string
}

func (m CmsNewsM) TableName() string {
    return "cms_news"
}

func (m CmsNewsM) IsAutoIncrement() bool {
    return true
}

func (m CmsNewsM) PrimaryKey() string {
    return "id"
}

func (m CmsNewsM) Columns() []string {
	return []string{
        "id",
        "title",
        "content",
        "topic",
        "status",
        "remark",
        "utime",
        "ctime",
    }
}

var CmsNewsMeta = CmsNewsM{
    ID: "id",
    Title: "title",
    Content: "content",
    Topic: "topic",
    Status: "status",
    Remark: "remark",
    Utime: "utime",
    Ctime: "ctime",
}




func (m CmsNewsM) IdIn(vals ...int64) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.ID).In(args...)
}

func (m CmsNewsM) IdNotIn(vals ...int64) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.ID).NotIn(args...)
}

func (m CmsNewsM) IdEQ(val int64) sqlbuilder.Column {
	return ql.Col(m.ID).EQ(val)
}

func (m CmsNewsM) IdNotEQ(val int64) sqlbuilder.Column {
	return ql.Col(m.ID).NotEQ(val)
}

func (m CmsNewsM) IdLT(val int64) sqlbuilder.Column {
	return ql.Col(m.ID).LT(val)
}

func (m CmsNewsM) IdLTEQ(val int64) sqlbuilder.Column {
	return ql.Col(m.ID).LTEQ(val)
}

func (m CmsNewsM) IdGT(val int64) sqlbuilder.Column {
	return ql.Col(m.ID).GT(val)
}

func (m CmsNewsM) IdGTEQ(val int64) sqlbuilder.Column {
	return ql.Col(m.ID).GTEQ(val)
}

func (m CmsNewsM) IdLike(val int64) sqlbuilder.Column {
	return ql.Col(m.ID).Like(val)
}

func (m CmsNewsM) IdNotLike(val int64) sqlbuilder.Column {
	return ql.Col(m.ID).NotLike(val)
}

func (m CmsNewsM) IdDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.ID)
}

func (m CmsNewsM) IdAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.ID)
}



func (m CmsNewsM) TitleIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Title).In(args...)
}

func (m CmsNewsM) TitleNotIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Title).NotIn(args...)
}

func (m CmsNewsM) TitleEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Title).EQ(val)
}

func (m CmsNewsM) TitleNotEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Title).NotEQ(val)
}

func (m CmsNewsM) TitleLT(val string) sqlbuilder.Column {
	return ql.Col(m.Title).LT(val)
}

func (m CmsNewsM) TitleLTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Title).LTEQ(val)
}

func (m CmsNewsM) TitleGT(val string) sqlbuilder.Column {
	return ql.Col(m.Title).GT(val)
}

func (m CmsNewsM) TitleGTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Title).GTEQ(val)
}

func (m CmsNewsM) TitleLike(val string) sqlbuilder.Column {
	return ql.Col(m.Title).Like(val)
}

func (m CmsNewsM) TitleNotLike(val string) sqlbuilder.Column {
	return ql.Col(m.Title).NotLike(val)
}

func (m CmsNewsM) TitleDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.Title)
}

func (m CmsNewsM) TitleAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.Title)
}



func (m CmsNewsM) ContentIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Content).In(args...)
}

func (m CmsNewsM) ContentNotIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Content).NotIn(args...)
}

func (m CmsNewsM) ContentEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Content).EQ(val)
}

func (m CmsNewsM) ContentNotEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Content).NotEQ(val)
}

func (m CmsNewsM) ContentLT(val string) sqlbuilder.Column {
	return ql.Col(m.Content).LT(val)
}

func (m CmsNewsM) ContentLTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Content).LTEQ(val)
}

func (m CmsNewsM) ContentGT(val string) sqlbuilder.Column {
	return ql.Col(m.Content).GT(val)
}

func (m CmsNewsM) ContentGTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Content).GTEQ(val)
}

func (m CmsNewsM) ContentLike(val string) sqlbuilder.Column {
	return ql.Col(m.Content).Like(val)
}

func (m CmsNewsM) ContentNotLike(val string) sqlbuilder.Column {
	return ql.Col(m.Content).NotLike(val)
}

func (m CmsNewsM) ContentDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.Content)
}

func (m CmsNewsM) ContentAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.Content)
}



func (m CmsNewsM) TopicIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Topic).In(args...)
}

func (m CmsNewsM) TopicNotIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Topic).NotIn(args...)
}

func (m CmsNewsM) TopicEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Topic).EQ(val)
}

func (m CmsNewsM) TopicNotEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Topic).NotEQ(val)
}

func (m CmsNewsM) TopicLT(val string) sqlbuilder.Column {
	return ql.Col(m.Topic).LT(val)
}

func (m CmsNewsM) TopicLTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Topic).LTEQ(val)
}

func (m CmsNewsM) TopicGT(val string) sqlbuilder.Column {
	return ql.Col(m.Topic).GT(val)
}

func (m CmsNewsM) TopicGTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Topic).GTEQ(val)
}

func (m CmsNewsM) TopicLike(val string) sqlbuilder.Column {
	return ql.Col(m.Topic).Like(val)
}

func (m CmsNewsM) TopicNotLike(val string) sqlbuilder.Column {
	return ql.Col(m.Topic).NotLike(val)
}

func (m CmsNewsM) TopicDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.Topic)
}

func (m CmsNewsM) TopicAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.Topic)
}



func (m CmsNewsM) StatusIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Status).In(args...)
}

func (m CmsNewsM) StatusNotIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Status).NotIn(args...)
}

func (m CmsNewsM) StatusEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Status).EQ(val)
}

func (m CmsNewsM) StatusNotEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Status).NotEQ(val)
}

func (m CmsNewsM) StatusLT(val string) sqlbuilder.Column {
	return ql.Col(m.Status).LT(val)
}

func (m CmsNewsM) StatusLTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Status).LTEQ(val)
}

func (m CmsNewsM) StatusGT(val string) sqlbuilder.Column {
	return ql.Col(m.Status).GT(val)
}

func (m CmsNewsM) StatusGTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Status).GTEQ(val)
}

func (m CmsNewsM) StatusLike(val string) sqlbuilder.Column {
	return ql.Col(m.Status).Like(val)
}

func (m CmsNewsM) StatusNotLike(val string) sqlbuilder.Column {
	return ql.Col(m.Status).NotLike(val)
}

func (m CmsNewsM) StatusDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.Status)
}

func (m CmsNewsM) StatusAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.Status)
}



func (m CmsNewsM) RemarkIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Remark).In(args...)
}

func (m CmsNewsM) RemarkNotIn(vals ...string) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Remark).NotIn(args...)
}

func (m CmsNewsM) RemarkEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Remark).EQ(val)
}

func (m CmsNewsM) RemarkNotEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Remark).NotEQ(val)
}

func (m CmsNewsM) RemarkLT(val string) sqlbuilder.Column {
	return ql.Col(m.Remark).LT(val)
}

func (m CmsNewsM) RemarkLTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Remark).LTEQ(val)
}

func (m CmsNewsM) RemarkGT(val string) sqlbuilder.Column {
	return ql.Col(m.Remark).GT(val)
}

func (m CmsNewsM) RemarkGTEQ(val string) sqlbuilder.Column {
	return ql.Col(m.Remark).GTEQ(val)
}

func (m CmsNewsM) RemarkLike(val string) sqlbuilder.Column {
	return ql.Col(m.Remark).Like(val)
}

func (m CmsNewsM) RemarkNotLike(val string) sqlbuilder.Column {
	return ql.Col(m.Remark).NotLike(val)
}

func (m CmsNewsM) RemarkDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.Remark)
}

func (m CmsNewsM) RemarkAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.Remark)
}



func (m CmsNewsM) UtimeIn(vals ...time.Time) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Utime).In(args...)
}

func (m CmsNewsM) UtimeNotIn(vals ...time.Time) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Utime).NotIn(args...)
}

func (m CmsNewsM) UtimeEQ(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Utime).EQ(val)
}

func (m CmsNewsM) UtimeNotEQ(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Utime).NotEQ(val)
}

func (m CmsNewsM) UtimeLT(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Utime).LT(val)
}

func (m CmsNewsM) UtimeLTEQ(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Utime).LTEQ(val)
}

func (m CmsNewsM) UtimeGT(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Utime).GT(val)
}

func (m CmsNewsM) UtimeGTEQ(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Utime).GTEQ(val)
}

func (m CmsNewsM) UtimeLike(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Utime).Like(val)
}

func (m CmsNewsM) UtimeNotLike(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Utime).NotLike(val)
}

func (m CmsNewsM) UtimeDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.Utime)
}

func (m CmsNewsM) UtimeAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.Utime)
}



func (m CmsNewsM) CtimeIn(vals ...time.Time) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Ctime).In(args...)
}

func (m CmsNewsM) CtimeNotIn(vals ...time.Time) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col(m.Ctime).NotIn(args...)
}

func (m CmsNewsM) CtimeEQ(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Ctime).EQ(val)
}

func (m CmsNewsM) CtimeNotEQ(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Ctime).NotEQ(val)
}

func (m CmsNewsM) CtimeLT(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Ctime).LT(val)
}

func (m CmsNewsM) CtimeLTEQ(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Ctime).LTEQ(val)
}

func (m CmsNewsM) CtimeGT(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Ctime).GT(val)
}

func (m CmsNewsM) CtimeGTEQ(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Ctime).GTEQ(val)
}

func (m CmsNewsM) CtimeLike(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Ctime).Like(val)
}

func (m CmsNewsM) CtimeNotLike(val time.Time) sqlbuilder.Column {
	return ql.Col(m.Ctime).NotLike(val)
}

func (m CmsNewsM) CtimeDesc() sqlbuilder.OrderBy {
	return ql.Desc(m.Ctime)
}

func (m CmsNewsM) CtimeAsc() sqlbuilder.OrderBy {
	return ql.Asc(m.Ctime)
}
